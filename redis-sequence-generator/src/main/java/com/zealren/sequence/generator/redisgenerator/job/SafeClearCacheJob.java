//package com.zealren.sequence.generator.redisgenerator.job;////import com.zealren.sequence.SequenceException;//import com.zealren.sequence.enums.SequenceLoopType;//import com.zealren.sequence.generator.redisgenerator.SeqHelper;//import com.zealren.sequence.generator.redisgenerator.util.JedisUtil;//import com.zealren.sequence.utils.DateUtils;//import com.zealren.sequence.utils.ListUtil;//import org.slf4j.Logger;//import org.slf4j.LoggerFactory;//import redis.clients.jedis.Jedis;//import redis.clients.jedis.ScanParams;//import redis.clients.jedis.ScanResult;////import javax.annotation.Resource;//import java.util.*;//////public class SafeClearCacheJob {//    private static Logger logger = LoggerFactory.getLogger(SafeClearCacheJob.class);////    @Resource//    private JedisUtil sequenceJedisUtil;////    public void execute() {//        logger.info("[++++++++SEQ清除缓存定时任务开始+++++++]");//        try {//            doExecute();//        } catch (Exception e) {//            logger.error("[++++++++EQ清除缓存定时任务运行异常+++++++]", e);//        }//    }////    public void doExecute() throws SequenceException {//        Jedis jedis = null;//        try {//            jedis = JedisUtil.getJedis();//            Integer pointer = 0;//            Set<String> keySets = new HashSet<>();//            do {////                sequenceJedisUtil;//                ScanResult<String> result = jedis.scan(pointer.toString(), new ScanParams().match("SEQ:*:*:*").count(30));//                String cursor = result.getStringCursor();//                pointer = Integer.valueOf(cursor);//                List<String> keys = result.getResult();//                if (ListUtil.isNotEmpty(keys)) {//                    keySets.addAll(keys);//                }//            } while (pointer != 0);//            for (String key : keySets) {//                List<String> fields = new ArrayList<>();//                Map<String, String> result = jedis.hgetAll(key);//                String loopType = result.get(SeqHelper.LOOP_TYPE);//                String seqKey = SeqHelper.getSeqKey(loopType, new Date());//                if (SequenceLoopType.DAY.getValue().equals(loopType)) {//                    filterKey(seqKey, "yyyyMMdd", fields, result);//                } else if (SequenceLoopType.MONTH.getValue().equals(loopType)) {//                    filterKey(seqKey, "yyyyMM", fields, result);//                } else if (SequenceLoopType.YEAR.getValue().equals(loopType)) {//                    filterKey(seqKey, "yyyy", fields, result);//                } else {//                    continue;//                }//                if (ListUtil.isNotEmpty(fields)) {//                    String[] arr = new String[fields.size()];//                    for (int i = 0; i < fields.size(); i++) {//                        arr[i] = fields.get(i);//                    }//                    jedis.hdel(key, arr);//                }//            }//        } catch (SequenceException e) {//            throw e;//        } catch (Exception ex) {//            logger.error("[++++++++EQ清除缓存定时任务运行异常+++++++]", e);//            throw new SequenceException("SEQ清除缓存执行异常");//        } finally {//            JedisUtil.closeJedis(jedis);//        }//    }////    private void filterKey(String seqKey, String forMatter, List<String> fields, Map<String, String> result) {//        for (Map.Entry<String, String> entry : result.entrySet()) {//            String fieldKey = entry.getKey();//            if (seqKey.equals(fieldKey) || SeqHelper.LOOP_TYPE.equals(fieldKey) || SeqHelper.SEQ_PREFIX.equals(fieldKey) ||//                    SeqHelper.SEQ_LENGTH.equals(fieldKey) || SeqHelper.SEQ_TEMPLATE.equals(fieldKey)) {//                continue;//            }//            Date exp = DateUtils.parseDate(fieldKey, forMatter);//            if (null != exp) {//                fields.add(fieldKey);//            }//        }//    }//}